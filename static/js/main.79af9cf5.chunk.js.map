{"version":3,"sources":["components/Block.tsx","models/Actions/Action.ts","models/Actions/AddCellAction.ts","models/Actions/LoseAction.ts","models/Actions/MergeAction.ts","models/Actions/MoveAction.ts","models/Actions/RestartAction.ts","models/Actions/LoadAction.ts","components/Map.tsx","components/Counter.tsx","components/Modal.tsx","components/Button.tsx","models/Direction.ts","components/Title.tsx","models/Point.ts","models/Cell.ts","models/Logic/LogicState.ts","models/Logic/Logic.ts","models/LogicRandomize/LogicRandomize.ts","utils/hooks.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["Block","props","cell","value","position","style","x","y","className","toString","length","Action","AddCellAction","this","clone","LoseAction","MergeAction","firstCell","secondCell","newCell","MoveAction","oldPosition","newPosition","RestartAction","LoadAction","cells","AnimatedCell","id","Map","mapAnimationParams","mapDimension","map","cellWithId","key","Counter","title","Modal","children","Button","onClick","Direction","Title","link","href","Point","p","Cell","LogicState","score","stepCount","Logic","randomize","_cells","_actions","_score","_stepCount","_mapDimension","_randomize","RangeError","TypeError","logicState","_","restartAction","push","matrix","i","j","yDirection","Left","from","to","Right","Up","Down","splice","indexOf","direction","actions","getPointTransform","cellsOnLine","filter","c","sort","c1","c2","freeX","num","currentCell","nextCell","dropCell","newValue","mergeAction","moveAction","addActions","addCell","canDoMove","getRandomPosition","some","equals","getRandomCellValue","action","Array","fill","Math","max","LogicRandomize","getRandomIntInclusive","min","ceil","floor","random","useMovementControl","callback","elementRef","useKeyboardArrows","useSwipeOnElement","useEffect","onKeyDown","e","document","addEventListener","removeEventListener","element","current","xDown","yDown","onTouchStart","touches","clientX","clientY","onTouchMove","xUp","yUp","xDiff","yDiff","abs","useClosingControl","onUnload","window","MapDimension","InitialDigitsCount","useLogicStateCookies","useCookies","cookies","setCookie","logicStateCookie","Boolean","location","hostname","match","ReactDOM","useState","logic","setLogic","mapRef","useRef","cellsRef","idCounterRef","setCells","findCellOnPosition","useCallback","cellsWithId","find","CellWithId","undefined","Error","sendActions","currentActions","newCells","cell1","useMapAnimation","setLogicStateCookie","newLogic","load","restart","move","save","ref","isEnd","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79af9cf5.chunk.js","sourcesContent":["import React from 'react';\nimport './Block.css';\nimport Cell from '../models/Cell';\n\nexport default function Block(props: {\n    cell: Cell\n}) {\n    const { value, position } = props.cell;\n    const style = {\n        \"--position-x\": position.x,\n        \"--position-y\": position.y\n    } as React.CSSProperties;\n    return <div style={style} className={`block block_value_${value}`}>\n        <span className={`block__text block__text_digits-count_${value.toString().length}`}>\n            {value || null}\n        </span>\n    </div>\n}\n","import ICloneable from '../ICloneable';\n\nabstract class Action implements ICloneable {\n    abstract clone(): Action;\n}\n\nexport default Action;","import Action from './Action';\nimport Cell from '../Cell';\n\nclass AddCellAction extends Action {\n    cell: Cell;\n\n    constructor(cell: Cell) {\n        super();\n        this.cell = cell;\n    }\n\n    clone(): AddCellAction {\n        return new AddCellAction(this.cell.clone());\n    }\n}\n\nexport default AddCellAction;","import Action from './Action';\n\nclass LoseAction extends Action {\n    clone(): LoseAction {\n        return new LoseAction();\n    }\n}\n\nexport default LoseAction;","import Action from './Action';\nimport Cell from '../Cell';\n\nclass MergeAction extends Action {\n    firstCell: Cell;\n    secondCell: Cell;\n    newCell: Cell;\n\n    constructor(firstCell: Cell, secondCell: Cell, newCell: Cell) {\n        super();\n        this.firstCell = firstCell;\n        this.secondCell = secondCell;\n        this.newCell = newCell;\n    }\n\n    clone(): MergeAction {\n        return new MergeAction(this.firstCell.clone(), this.secondCell.clone(), this.newCell.clone());\n    }\n}\n\nexport default MergeAction;","import Action from './Action';\nimport Point from '../Point';\n\nclass MoveAction extends Action {\n    value: number;\n    oldPosition: Point;\n    newPosition: Point;\n\n    constructor(value: number, oldPosition: Point, newPosition: Point) {\n        super();\n        this.value = value;\n        this.oldPosition = oldPosition;\n        this.newPosition = newPosition;\n    }\n\n    clone(): MoveAction {\n        return new MoveAction(this.value, this.oldPosition.clone(), this.newPosition.clone());\n    }\n}\n\nexport default MoveAction;","import Action from './Action';\n\nclass RestartAction extends Action {\n    clone(): RestartAction {\n        return new RestartAction();\n    }\n}\n\nexport default RestartAction;","import Action from './Action';\nimport Cell from '../Cell';\n\nclass LoadAction extends Action {\n    cells: Cell[];\n\n    constructor(cells: Cell[]) {\n        super();\n        this.cells = cells;\n    }\n\n    clone(): LoadAction {\n        return new LoadAction(this.cells);\n    }\n}\n\nexport default LoadAction;\n","import React, { useRef, useState, useCallback } from 'react';\nimport './Map.css';\nimport Block from './Block';\nimport ICloneable from '../models/ICloneable';\nimport Cell from '../models/Cell';\nimport Point from '../models/Point';\nimport { Action, AddCellAction, MoveAction, MergeAction, RestartAction, LoadAction } from '../models/Actions';\n\nclass AnimatedCell implements ICloneable {\n    cell: Cell;\n    id: number;\n\n    constructor(cell: Cell, id: number) {\n        this.cell = cell;\n        this.id = id;\n    }\n\n    clone(): AnimatedCell {\n        return new AnimatedCell(this.cell.clone(), this.id);\n    }\n}\n\nexport type MapAnimationParams = {\n    cells: AnimatedCell[];\n}\n\nexport function useMapAnimation(): {mapAnimationParams: MapAnimationParams, sendActions: (currentActions: Action[]) => void} {\n    const cellsRef = useRef<AnimatedCell[]>([]);\n    const idCounterRef = useRef(0);\n    const [cells, setCells] = useState<AnimatedCell[]>([]);\n    \n    const findCellOnPosition = useCallback((cellsWithId: AnimatedCell[], position: Point): AnimatedCell => {\n        const cell = cellsWithId.find(CellWithId => CellWithId.cell.position.equals(position));\n        if (cell === undefined) throw new Error('');\n        return cell;\n    }, []);\n\n    const sendActions = useCallback((currentActions: Action[]) => {\n        let newCells = [...cellsRef.current];\n        for (const action of currentActions) {\n            if( action instanceof AddCellAction) {\n                newCells.push(new AnimatedCell(action.cell.clone(), idCounterRef.current++));\n            } else if (action instanceof MoveAction) {\n                const cell = findCellOnPosition(cellsRef.current, action.oldPosition);\n                cell.cell.position = action.newPosition.clone();\n            } else if (action instanceof MergeAction) {\n                const cell1 = findCellOnPosition(cellsRef.current, action.firstCell.position);\n                const cell2 = findCellOnPosition(cellsRef.current, action.secondCell.position);\n                cell2.cell = action.newCell.clone();\n                newCells.splice(newCells.indexOf(cell1), 1);\n            } else if (action instanceof RestartAction) {\n                newCells.length = 0;\n            } else if (action instanceof LoadAction) {\n                newCells = action.cells.map(cell => new AnimatedCell(cell.clone(), idCounterRef.current++));\n            }\n        }\n        cellsRef.current = newCells;\n        setCells(cellsRef.current);\n    }, [findCellOnPosition]);\n\n    return {\n        mapAnimationParams: {cells: cells}, \n        sendActions\n    };\n}\n\n\nexport default function Map(props: {\n    mapAnimationParams: MapAnimationParams;\n    mapDimension: number;\n}){\n    const { mapAnimationParams, mapDimension } = props;\n    return <div className='map' style={{'--map-dimension': mapDimension} as React.CSSProperties}>\n        {mapAnimationParams.cells.map(cellWithId => <Block key={cellWithId.id} cell={cellWithId.cell}/>)}\n    </div>\n}\n","import React from 'react';\nimport './Counter.css';\n\nexport default function Counter(props: {\n    title: string\n    value: number\n}) {\n    const { title, value } = props;\n    return <div className={'counter'}>\n        <div className={'counter__title'}>\n            {title}\n        </div>\n        <div className={'counter__value'}>\n            {value}\n        </div>\n    </div>\n}\n","import React, { ReactNode } from 'react';\nimport './Modal.css'\n\nexport default function Modal(props: {\n    title: string;\n    children: ReactNode;\n}) {\n    return <div className='modal'>\n        <div className='modal__content'>\n            <h1 className='modal__title'>{props.title}</h1>\n            {props.children}\n        </div>\n    </div>\n}\n","import React from 'react';\nimport './Button.css'\n\nexport default function Button(props: {\n    onClick: () => void\n    title: string\n}) {\n    return <div className='button' onClick={props.onClick}>{props.title}</div>\n}\n","enum Direction {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n\nexport default Direction;","import React, { ReactNode } from 'react';\nimport './Title.css';\n\nexport default function Title(props: {\n    children: ReactNode,\n    link: string,\n}) {\n    const {children, link} = props;\n    return <h1 className='title'><a href={link}>{children}</a></h1>;\n}\n","import ICloneable from './ICloneable';\n\nclass Point implements ICloneable {\n    x: number = 0;\n    y: number = 0;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    equals(p: Point): boolean {\n        return p.x === this.x && p.y === this.y;\n    }\n\n    clone(): Point {\n        return new Point(this.x, this.y);\n    }\n}\n\nexport default Point;","import Point from './Point';\nimport ICloneable from './ICloneable';\n\nclass Cell implements ICloneable {\n    value: number;\n    position: Point;\n\n    constructor(value: number, position: Point) {\n        this.value = value;\n        this.position = position;\n    }\n    \n    clone(): Cell {\n        return new Cell(this.value, this.position.clone());\n    }\n}\n\nexport default Cell;","import Cell from '../Cell';\n\nclass LogicState {\n    cells: Cell[] = [];\n    score: number = 0;\n    stepCount: number = 0;\n    mapDimension: number = 0;\n}\n\nexport default LogicState;\n","import ILogic from './ILogic';\nimport ILogicRandomize from '../LogicRandomize/ILogicRandomize';\nimport Direction from '../Direction';\nimport Point from '../Point';\nimport Cell from '../Cell';\nimport LogicState from './LogicState';\nimport { Action, AddCellAction, MoveAction, MergeAction, LoseAction, RestartAction, LoadAction } from '../Actions';\n\nclass Logic implements ILogic {\n\n    load(logicState: LogicState): Action[] {\n        this._actions = [];\n        this._cells = logicState.cells;\n        this._mapDimension = logicState.mapDimension;\n        this._score = logicState.score;\n        this._stepCount = logicState.stepCount;\n        return [new LoadAction(logicState.cells)];\n    }\n\n    save(): LogicState {\n        const logicState = new LogicState();\n        logicState.cells = this._cells.map(_ => _.clone());\n        logicState.mapDimension = this.mapDimension;\n        logicState.score = this._score;\n        logicState.stepCount = this._stepCount;\n        return logicState;\n    }\n\n    restart(): Action[] {\n        this._cells = [];\n        this._score = 0;\n        this._stepCount = 0;\n\n        const restartAction = new RestartAction();\n        this._actions.push(restartAction);\n        return [restartAction];\n    }\n\n    private canDoMove(): boolean {\n        const hasFreeSpace = this._cells.length < (this.mapDimension * this.mapDimension);\n        if(hasFreeSpace) {\n            return true;\n        }\n        \n        const matrix = this.matrix;\n\n        for(let i = 0; i < matrix.length; i++) {\n            for(let j = 0; j < matrix.length - 1; j++) {\n                if (matrix[i][j] === matrix[i][j + 1]\n                 || matrix[j][i] === matrix[j + 1][i]) {\n                     return true;\n                 }\n            }\n        }\n\n        return false;\n    }\n\n    private getPointTransform(mapDimension: number, yDirection: Direction): {\n        from(p: Point): Point;\n        to(p: Point): Point;\n    } {\n        switch(yDirection) {\n            case Direction.Left:\n                return {\n                    from: p => p,\n                    to: p => p\n                };\n            case Direction.Right:\n                return {\n                    from: p => new Point(mapDimension - p.x - 1, p.y),\n                    to: p => new Point(mapDimension - p.x - 1, p.y)\n                };\n            case Direction.Up:\n                return {\n                    from: p => new Point(p.y, p.x),\n                    to: p => new Point(p.y, p.x)\n                };\n            case Direction.Down:\n                return {\n                    from: p => new Point(mapDimension - p.y - 1, p.x),\n                    to: p => new Point(p.y, mapDimension - p.x - 1)\n                };\n        }\n    }\n\n    private dropCell(cell: Cell): void {\n        this._cells.splice(this._cells.indexOf(cell), 1);\n    }\n\n    move(direction: Direction): Action[] {\n        const actions: Action[] = [];\n        const { from, to } = this.getPointTransform(this.mapDimension, direction);\n        for(let y = 0; y < this.mapDimension; y++) {\n            const cellsOnLine = this._cells\n                .filter(c => from(c.position).y === y)\n                .sort((c1, c2) => from(c1.position).x - from(c2.position).x);\n            let freeX = 0;\n            for(let num = 0; num < cellsOnLine.length; num++) {\n                const currentCell = cellsOnLine[num];\n                const nextCell = num + 1 < cellsOnLine.length ? cellsOnLine[num + 1] : null;\n                if (nextCell !== null && currentCell.value === nextCell.value) {\n                    this.dropCell(currentCell);\n                    this.dropCell(nextCell);\n                    const newValue = currentCell.value * 2;\n                    const newCell = new Cell(newValue, to(new Point(freeX, y)));\n                    this._cells.push(newCell);\n                    const mergeAction = new MergeAction(currentCell, nextCell, newCell);\n                    actions.push(mergeAction);\n                    this._score += newValue;\n                    num++;\n                } else {\n                    if (freeX < from(currentCell.position).x) {\n                        const oldPosition = currentCell.position.clone();\n                        currentCell.position = to(new Point(freeX, from(currentCell.position).y));\n                        const newPosition = currentCell.position.clone();\n                        const moveAction = new MoveAction(currentCell.value, oldPosition, newPosition);\n                        actions.push(moveAction);\n                    }\n                }\n                freeX++;\n            }\n        }\n\n        if (actions.length <= 0) {\n            return [];\n        }\n                    \n        this._stepCount++;\n        this._actions.push(...actions);\n\n        const addActions = this.addCell();\n        actions.push(...addActions);\n\n        if (!this.canDoMove()) {\n            actions.push(new LoseAction());\n        }\n\n        return actions;\n    }\n\n    addCell(): Action[] {\n        while(true) {\n            const position = this._randomize.getRandomPosition(this.mapDimension);\n            if (!this._cells.some(c => c.position.equals(position))) {\n                const value = this._randomize.getRandomCellValue();\n                const newCell = new Cell(value, position);\n                this._cells.push(newCell);\n                const action = new AddCellAction(newCell);\n                this._actions.push(action);\n                return [action];\n            }\n        };\n    }\n\n    get matrix(): number[][] {\n        let matrix: number[][] = Array(this.mapDimension)\n            .fill([])\n            .map(() => Array(this.mapDimension)\n                .fill(0)\n            );\n        for(const cell of this._cells) {\n            matrix[cell.position.y][cell.position.x] = cell.value;\n        }\n        return matrix;\n    }\n\n    get score(): number {\n        return this._score;\n    }\n\n    get stepCount(): number {\n        return this._stepCount;\n    }\n\n    get maxValue(): number {\n        return this._cells.length > 0 \n            ? Math.max(...this._cells.map(cell => cell.value))\n            : 0;\n    }\n\n    get mapDimension(): number {\n        return this._mapDimension;\n    }\n\n    get isEnd(): boolean {\n        return !this.canDoMove();\n    }\n\n\n    constructor(mapDimension: number, randomize: ILogicRandomize) {\n        if (mapDimension < 2) throw new RangeError('mapDimension shouldn`t be lower than 2');\n        if (!randomize) throw new TypeError('randomize shouldn`t be null');\n        this._mapDimension = mapDimension;\n        this._randomize = randomize;\n    }\n\n\n    private _cells: Cell[] = [];\n    private _actions: Action[] = [];\n    private _score: number = 0;\n    private _stepCount: number = 0;\n    private _mapDimension: number;\n    private readonly _randomize: ILogicRandomize;\n}\n\nexport default Logic;\n","import ILogicRandomize from './ILogicRandomize';\nimport Point from '../Point';\n\nclass LogicRandomize implements ILogicRandomize {\n    getRandomPosition(mapDimension: number): Point {\n        return new Point(\n            this.getRandomIntInclusive(0, mapDimension - 1),\n            this.getRandomIntInclusive(0, mapDimension - 1)\n        );\n    }\n    getRandomCellValue(): number {\n        return this.getRandomIntInclusive(0, 5) > 0 ? 2 : 4;\n    }\n\n    private getRandomIntInclusive(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n}\n\nexport default LogicRandomize;\n","import Direction from '../models/Direction';\nimport { useEffect } from 'react';\n\nexport const useMovementControl = (callback: (direction: Direction) => void, elementRef: React.MutableRefObject<HTMLElement | null>): void => {\n    useKeyboardArrows(callback);\n    useSwipeOnElement(callback, elementRef);\n}\n\nexport const useKeyboardArrows = (callback: (direction: Direction) => void): void => {\n    useEffect(() => {\n        const onKeyDown = (e: KeyboardEvent) => {\n            let direction;\n            switch (e.key){\n                case 'ArrowUp': direction = Direction.Up; break;\n                case 'ArrowDown': direction = Direction.Down; break;\n                case 'ArrowLeft': direction = Direction.Left; break;\n                case 'ArrowRight': direction = Direction.Right; break;\n                default: return;\n            };\n            callback(direction);\n        };\n        document.addEventListener('keydown', onKeyDown, false);\n        return () => document.removeEventListener('keydown', onKeyDown, false);\n    }, [callback]);\n}\n\nexport const useSwipeOnElement = (callback: (direction: Direction) => void, elementRef: React.MutableRefObject<HTMLElement | null>): void => {\n    useEffect(() => {\n        const element = elementRef.current;\n        if (!element) {\n            return;\n        }\n        \n        let xDown: number | null = null;\n        let yDown: number | null = null;\n\n        const onTouchStart = (e: TouchEvent) => {\n            xDown = e.touches[0].clientX;\n            yDown = e.touches[0].clientY;\n        };\n\n        const onTouchMove = (e: TouchEvent) => {\n            if (!xDown || !yDown) {\n                return;\n            }\n            const xUp = e.touches[0].clientX;\n            const yUp = e.touches[0].clientY;\n            const xDiff = xDown - xUp;\n            const yDiff = yDown - yUp;\n\n            if (Math.abs(xDiff) > Math.abs(yDiff)) {\n                if (xDiff > 0) {\n                    callback(Direction.Left);\n                } else {\n                    callback(Direction.Right);\n                }\n            } else {\n                if (yDiff > 0) {\n                    callback(Direction.Up);\n                } else {\n                    callback(Direction.Down);\n                }\n            }\n\n            xDown = null;\n            yDown = null;\n        };\n\n        element.addEventListener('touchstart', onTouchStart, false);\n        element.addEventListener('touchmove', onTouchMove, false);\n\n        return () => {\n            element.removeEventListener('touchstart', onTouchStart, false);\n            element.removeEventListener('touchmove', onTouchMove, false);\n        }\n    }, [callback, elementRef]);\n}\n\nexport const useClosingControl = (callback: () => void): void => {\n    useEffect(() => {\n        const onUnload = function(e: Event): any {\n            callback();\n            return false;\n        };\n\n        window.addEventListener(\"unload\", onUnload);\n        return () => {\n            window.removeEventListener(\"unload\", onUnload, false);\n        }\n    }, [callback]);\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { useCookies } from \"react-cookie\";\nimport Map, { useMapAnimation } from './components/Map';\nimport Counter from './components/Counter';\nimport Modal from './components/Modal';\nimport Button from './components/Button';\nimport Title from './components/Title';\nimport Direction from './models/Direction';\nimport Logic from './models/Logic/Logic';\nimport LogicRandomize from './models/LogicRandomize/LogicRandomize';\nimport { Action } from './models/Actions';\nimport { useMovementControl, useClosingControl } from './utils/hooks';\nimport LogicState from './models/Logic/LogicState';\nimport Cell from './models/Cell';\nimport Point from './models/Point';\n\n/*todo create config file*/\nconst MapDimension = 4;\nconst InitialDigitsCount = 2;\n\nconst useLogicStateCookies = () => {\n    const CookieName = 'LogicState';\n    const [cookies, setCookie] = useCookies([CookieName]);\n\n    const logicStateCookie = cookies[CookieName] || null;\n    if (logicStateCookie) {\n        logicStateCookie.cells = logicStateCookie.cells.map((cell: any) => \n            new Cell(cell.value, new Point(cell.position.x, cell.position.y)));\n    }\n\n    const setLogicStateCookie = (logicState: LogicState): void => setCookie(CookieName, logicState);\n\n    return [logicStateCookie, setLogicStateCookie];\n}\n\nexport default function App() {\n    const [logic, setLogic] = useState<Logic | null>(null);\n    const mapRef = useRef(null);\n\n    const {mapAnimationParams, sendActions} = useMapAnimation();\n    const [logicStateCookie, setLogicStateCookie] = useLogicStateCookies();\n\n    useEffect(() => {\n        if (logicStateCookie) {\n            const newLogic = new Logic(MapDimension, new LogicRandomize());\n            const actions = newLogic.load(logicStateCookie);\n            setLogic(newLogic);\n            sendActions(actions);\n        } else {\n            const newLogic = new Logic(MapDimension, new LogicRandomize());\n            const actions: Action[] = [];\n            for (let i = 0; i < InitialDigitsCount; i++) {\n                const action = newLogic.addCell();\n                actions.push(...action);\n            }\n            setLogic(newLogic);\n            sendActions(actions);\n        }\n    }, [sendActions, logicStateCookie]);\n\n    const restart = () => {\n        if (logic === null) return;\n        const actions = logic.restart();\n        for (let i = 0; i < InitialDigitsCount; i++) {\n            const action = logic.addCell();\n            actions.push(...action);\n        }\n        sendActions(actions);\n    };\n\n    useMovementControl((direction: Direction) => {\n        if (logic === null) return;\n        const actions = logic.move(direction);\n        sendActions(actions);\n    }, mapRef);\n\n    useClosingControl(() => {\n        logic && setLogicStateCookie(logic.save());\n    });\n    \n    return (logic &&\n        <div className='app'>\n            <div ref={mapRef} className='app__map'>\n                <Map mapDimension={logic.mapDimension} mapAnimationParams={mapAnimationParams}/>\n            </div>\n            <div className='app__title'>\n                <Title link='https://github.com/shiriev/shiriev-2048/'>2048</Title>\n            </div>\n            <div className='app__score'>\n                <Counter title={'очки'} value={logic.score}/>\n            </div>\n            <div className='app__step-count'>\n                <Counter title={'ходы'} value={logic.stepCount}/>\n            </div>\n            <div className='app__restart-button'>\n                <Button title={'рестарт'} onClick={restart}/>\n            </div>\n            {\n                logic.isEnd && \n                <Modal title='Игра окончена'>\n                        <p>Хотите сыграть ещё?</p>\n                        <Button title='рестарт' onClick={restart}/>\n                </Modal>\n            }\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}