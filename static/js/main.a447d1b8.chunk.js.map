{"version":3,"sources":["components/Block.tsx","models/Actions/Action.ts","models/Actions/AddCellAction.ts","models/Actions/LoseAction.ts","models/Actions/MergeAction.ts","models/Actions/MoveAction.ts","models/Actions/RestartAction.ts","components/Map.tsx","components/Counter.tsx","components/Modal.tsx","models/Direction.ts","components/Button.tsx","models/Point.ts","models/Cell.ts","models/Logic/LogicState.ts","models/Logic/Logic.ts","models/LogicRandomize/LogicRandomize.ts","App.tsx","serviceWorker.js","index.tsx","utils/hooks.ts"],"names":["Block","props","cell","value","position","style","x","y","className","toString","length","Action","AddCellAction","this","clone","LoseAction","MergeAction","firstCell","secondCell","newCell","MoveAction","oldPosition","newPosition","RestartAction","AnimatedCell","id","Map","mapAnimationParams","mapSize","cells","map","cellWithId","key","Counter","title","Modal","children","Direction","Button","onClick","Point","p","Cell","LogicState","actions","score","stepCount","Logic","randomize","_cells","_actions","_score","_stepCount","_mapSize","_randomize","RangeError","TypeError","logicState","_","restartAction","push","matrix","i","j","yDirection","Left","from","to","Right","Up","Down","splice","indexOf","direction","getPointTransform","cellsOnLine","filter","c","sort","c1","c2","freeX","num","currentCell","nextCell","dropCell","newValue","mergeAction","moveAction","addActions","addCell","canDoMove","getRandomPosition","some","equals","getRandomCellValue","action","Array","fill","Math","max","LogicRandomize","matrixSize","getRandomIntInclusive","min","ceil","floor","random","MapSize","InitialDigitsCount","Boolean","window","location","hostname","match","ReactDOM","callback","useState","logic","setLogic","cellsRef","useRef","idCounterRef","setCells","findCellOnPosition","useCallback","cellsWithId","find","CellWithId","undefined","Error","sendActions","currentActions","newCells","current","cell1","useMapAnimation","useEffect","newLogic","move","onKeyDown","e","document","addEventListener","removeEventListener","href","isEnd","restart","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a447d1b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Block.css';\r\nimport Cell from '../models/Cell';\r\n\r\nexport default function Block(props: {\r\n    cell: Cell\r\n}) {\r\n    const { value, position } = props.cell;\r\n    const style = {\r\n        \"--position-x\": position.x,\r\n        \"--position-y\": position.y\r\n    } as React.CSSProperties;\r\n    return <div style={style} className={`block block_value_${value}`}>\r\n        <span className={`block__text block__text_digits-count_${value.toString().length}`}>\r\n            {value || null}\r\n        </span>\r\n    </div>\r\n}\r\n","import ICloneable from '../ICloneable';\r\n\r\nabstract class Action implements ICloneable {\r\n    abstract clone(): Action;\r\n}\r\n\r\nexport default Action;","import Action from './Action';\r\nimport Cell from '../Cell';\r\n\r\nclass AddCellAction extends Action {\r\n    cell: Cell;\r\n\r\n    constructor(cell: Cell) {\r\n        super();\r\n        this.cell = cell;\r\n    }\r\n\r\n    clone(): AddCellAction {\r\n        return new AddCellAction(this.cell.clone());\r\n    }\r\n}\r\n\r\nexport default AddCellAction;","import Action from './Action';\r\n\r\nclass LoseAction extends Action {\r\n    clone(): LoseAction {\r\n        return new LoseAction();\r\n    }\r\n}\r\n\r\nexport default LoseAction;","import Action from './Action';\r\nimport Cell from '../Cell';\r\n\r\nclass MergeAction extends Action {\r\n    firstCell: Cell;\r\n    secondCell: Cell;\r\n    newCell: Cell;\r\n\r\n    constructor(firstCell: Cell, secondCell: Cell, newCell: Cell) {\r\n        super();\r\n        this.firstCell = firstCell;\r\n        this.secondCell = secondCell;\r\n        this.newCell = newCell;\r\n    }\r\n\r\n    clone(): MergeAction {\r\n        return new MergeAction(this.firstCell.clone(), this.secondCell.clone(), this.newCell.clone());\r\n    }\r\n}\r\n\r\nexport default MergeAction;","import Action from './Action';\r\nimport Point from '../Point';\r\n\r\nclass MoveAction extends Action {\r\n    value: number;\r\n    oldPosition: Point;\r\n    newPosition: Point;\r\n\r\n    constructor(value: number, oldPosition: Point, newPosition: Point) {\r\n        super();\r\n        this.value = value;\r\n        this.oldPosition = oldPosition;\r\n        this.newPosition = newPosition;\r\n    }\r\n\r\n    clone(): MoveAction {\r\n        return new MoveAction(this.value, this.oldPosition.clone(), this.newPosition.clone());\r\n    }\r\n}\r\n\r\nexport default MoveAction;","import Action from './Action';\r\n\r\nclass RestartAction extends Action {\r\n    clone(): RestartAction {\r\n        return new RestartAction();\r\n    }\r\n}\r\n\r\nexport default RestartAction;","import React, { useRef, useState, useCallback } from 'react';\r\nimport './Map.css';\r\nimport Block from './Block';\r\nimport ICloneable from '../models/ICloneable';\r\nimport Cell from '../models/Cell';\r\nimport Point from '../models/Point';\r\nimport { Action, AddCellAction, MoveAction, MergeAction, RestartAction } from '../models/Actions';\r\n\r\nclass AnimatedCell implements ICloneable {\r\n    cell: Cell;\r\n    id: number;\r\n\r\n    constructor(cell: Cell, id: number) {\r\n        this.cell = cell;\r\n        this.id = id;\r\n    }\r\n\r\n    clone(): AnimatedCell {\r\n        return new AnimatedCell(this.cell.clone(), this.id);\r\n    }\r\n}\r\n\r\nexport type MapAnimationParams = {\r\n    cells: AnimatedCell[];\r\n}\r\n\r\nexport function useMapAnimation(): {mapAnimationParams: MapAnimationParams, sendActions: (currentActions: Action[]) => void} {\r\n    const cellsRef = useRef<AnimatedCell[]>([]);\r\n    const idCounterRef = useRef(0);\r\n    const [cells, setCells] = useState<AnimatedCell[]>([]);\r\n    \r\n    const findCellOnPosition = useCallback((cellsWithId: AnimatedCell[], position: Point): AnimatedCell => {\r\n        const cell = cellsWithId.find(CellWithId => CellWithId.cell.position.equals(position));\r\n        if (cell === undefined) throw new Error('');\r\n        return cell;\r\n    }, []);\r\n\r\n    const sendActions = useCallback((currentActions: Action[]) => {\r\n        const newCells = [...cellsRef.current];\r\n        for (const action of currentActions) {\r\n            if( action instanceof AddCellAction) {\r\n                newCells.push(new AnimatedCell(action.cell.clone(), idCounterRef.current++));\r\n            } else if (action instanceof MoveAction) {\r\n                const cell = findCellOnPosition(cellsRef.current, action.oldPosition);\r\n                cell.cell.position = action.newPosition.clone();\r\n            } else if (action instanceof MergeAction) {\r\n                const cell1 = findCellOnPosition(cellsRef.current, action.firstCell.position);\r\n                const cell2 = findCellOnPosition(cellsRef.current, action.secondCell.position);\r\n                cell2.cell = action.newCell.clone();\r\n                newCells.splice(newCells.indexOf(cell1), 1);\r\n            } else if (action instanceof RestartAction) {\r\n                newCells.length = 0;\r\n            }\r\n        }\r\n        cellsRef.current = newCells;\r\n        setCells(cellsRef.current);\r\n    }, [findCellOnPosition]);\r\n\r\n    return {\r\n        mapAnimationParams: {cells: cells}, \r\n        sendActions\r\n    };\r\n}\r\n\r\n\r\nexport default function Map(props: {\r\n    mapAnimationParams: MapAnimationParams;\r\n    mapSize: number;\r\n}){\r\n    const { mapAnimationParams, mapSize } = props;\r\n    return <div className='map' style={{'--map-size': mapSize} as React.CSSProperties}>\r\n        {mapAnimationParams.cells.map(cellWithId => <Block key={cellWithId.id} cell={cellWithId.cell}/>)}\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport './Counter.css';\r\n\r\nexport default function Counter(props: {\r\n    title: string\r\n    value: number\r\n}) {\r\n    const { title, value } = props;\r\n    return <div className={'counter'}>\r\n        <div className={'counter__title'}>\r\n            {title}\r\n        </div>\r\n        <div className={'counter__value'}>\r\n            {value}\r\n        </div>\r\n    </div>\r\n}\r\n","import React, { ReactNode } from 'react';\r\nimport './Modal.css'\r\n\r\nexport default function Modal(props: {\r\n    title: string;\r\n    children: ReactNode;\r\n}) {\r\n    return <div className='modal'>\r\n        <div className='modal__content'>\r\n            <h1 className='modal__title'>{props.title}</h1>\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n}\r\n","enum Direction {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n}\r\n\r\nexport default Direction;","import React from 'react';\r\nimport './Button.css'\r\n\r\nexport default function Button(props: {\r\n    onClick: () => void\r\n    title: string\r\n}) {\r\n    return <div className='button' onClick={props.onClick}>{props.title}</div>\r\n}\r\n","import ICloneable from './ICloneable';\r\n\r\nclass Point implements ICloneable {\r\n    x: number = 0;\r\n    y: number = 0;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    equals(p: Point): boolean {\r\n        return p.x === this.x && p.y === this.y;\r\n    }\r\n\r\n    clone(): Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n}\r\n\r\nexport default Point;","import Point from './Point';\r\nimport ICloneable from './ICloneable';\r\n\r\nclass Cell implements ICloneable {\r\n    value: number;\r\n    position: Point;\r\n\r\n    constructor(value: number, position: Point) {\r\n        this.value = value;\r\n        this.position = position;\r\n    }\r\n    \r\n    clone(): Cell {\r\n        return new Cell(this.value, this.position.clone());\r\n    }\r\n}\r\n\r\nexport default Cell;","import Cell from '../Cell';\r\nimport {Action} from '../Actions';\r\n\r\nclass LogicState {\r\n    cells: Cell[] = [];\r\n    actions: Action[] = [];\r\n    score: number = 0;\r\n    stepCount: number = 0;\r\n    mapSize: number = 0;\r\n}\r\n\r\nexport default LogicState;","import ILogic from './ILogic';\r\nimport ILogicRandomize from '../LogicRandomize/ILogicRandomize';\r\nimport Direction from '../Direction';\r\nimport Point from '../Point';\r\nimport Cell from '../Cell';\r\nimport LogicState from './LogicState';\r\nimport { Action, AddCellAction, MoveAction, MergeAction, LoseAction, RestartAction } from '../Actions';\r\n\r\nclass Logic implements ILogic {\r\n\r\n    load(logicState: LogicState): void {\r\n        this._actions = logicState.actions;\r\n        this._cells = logicState.cells;\r\n        this._mapSize = logicState.mapSize;\r\n        this._score = logicState.score;\r\n        this._stepCount = logicState.stepCount;\r\n    }\r\n\r\n    save(): LogicState {\r\n        const logicState = new LogicState();\r\n        logicState.actions = this._actions.map(_ => _.clone());\r\n        logicState.cells = this._cells.map(_ => _.clone());\r\n        logicState.mapSize = this.mapSize;\r\n        logicState.score = this._score;\r\n        logicState.stepCount = this._stepCount;\r\n        return logicState;\r\n    }\r\n\r\n    restart(): Action[] {\r\n        this._cells = [];\r\n        this._score = 0;\r\n        this._stepCount = 0;\r\n\r\n        const restartAction = new RestartAction();\r\n        this._actions.push(restartAction);\r\n        return [restartAction];\r\n    }\r\n\r\n    private canDoMove(): boolean {\r\n        const hasFreeSpace = this._cells.length < (this.mapSize * this.mapSize);\r\n        if(hasFreeSpace) {\r\n            return true;\r\n        }\r\n        \r\n        const matrix = this.matrix;\r\n\r\n        for(let i = 0; i < matrix.length; i++) {\r\n            for(let j = 0; j < matrix.length - 1; j++) {\r\n                if (matrix[i][j] === matrix[i][j + 1]\r\n                 || matrix[j][i] === matrix[j + 1][i]) {\r\n                     return true;\r\n                 }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private getPointTransform(mapSize: number, yDirection: Direction): {\r\n        from(p: Point): Point;\r\n        to(p: Point): Point;\r\n    } {\r\n        switch(yDirection) {\r\n            case Direction.Left:\r\n                return {\r\n                    from: p => p,\r\n                    to: p => p\r\n                };\r\n            case Direction.Right:\r\n                return {\r\n                    from: p => new Point(mapSize - p.x - 1, p.y),\r\n                    to: p => new Point(mapSize - p.x - 1, p.y)\r\n                };\r\n            case Direction.Up:\r\n                return {\r\n                    from: p => new Point(p.y, p.x),\r\n                    to: p => new Point(p.y, p.x)\r\n                };\r\n            case Direction.Down:\r\n                return {\r\n                    from: p => new Point(mapSize - p.y - 1, p.x),\r\n                    to: p => new Point(p.y, mapSize - p.x - 1)\r\n                };\r\n        }\r\n    }\r\n\r\n    private dropCell(cell: Cell): void {\r\n        this._cells.splice(this._cells.indexOf(cell), 1);\r\n    }\r\n\r\n    move(direction: Direction): Action[] {\r\n        const actions: Action[] = [];\r\n        const { from, to } = this.getPointTransform(this.mapSize, direction);\r\n        for(let y = 0; y < this.mapSize; y++) {\r\n            const cellsOnLine = this._cells\r\n                .filter(c => from(c.position).y === y)\r\n                .sort((c1, c2) => from(c1.position).x - from(c2.position).x);\r\n            let freeX = 0;\r\n            for(let num = 0; num < cellsOnLine.length; num++) {\r\n                const currentCell = cellsOnLine[num];\r\n                const nextCell = num + 1 < cellsOnLine.length ? cellsOnLine[num + 1] : null;\r\n                if (nextCell !== null && currentCell.value === nextCell.value) {\r\n                    this.dropCell(currentCell);\r\n                    this.dropCell(nextCell);\r\n                    const newValue = currentCell.value * 2;\r\n                    const newCell = new Cell(newValue, to(new Point(freeX, y)));\r\n                    this._cells.push(newCell);\r\n                    const mergeAction = new MergeAction(currentCell, nextCell, newCell);\r\n                    actions.push(mergeAction);\r\n                    this._score += newValue;\r\n                    num++;\r\n                } else {\r\n                    if (freeX < from(currentCell.position).x) {\r\n                        const oldPosition = currentCell.position.clone();\r\n                        currentCell.position = to(new Point(freeX, from(currentCell.position).y));\r\n                        const newPosition = currentCell.position.clone();\r\n                        const moveAction = new MoveAction(currentCell.value, oldPosition, newPosition);\r\n                        actions.push(moveAction);\r\n                    }\r\n                }\r\n                freeX++;\r\n            }\r\n        }\r\n\r\n        if (actions.length <= 0) {\r\n            return [];\r\n        }\r\n                    \r\n        this._stepCount++;\r\n        this._actions.push(...actions);\r\n\r\n        const addActions = this.addCell();\r\n        actions.push(...addActions);\r\n\r\n        if (!this.canDoMove()) {\r\n            actions.push(new LoseAction());\r\n        }\r\n\r\n        return actions;\r\n    }\r\n\r\n    addCell(): Action[] {\r\n        while(true) {\r\n            const position = this._randomize.getRandomPosition(this.mapSize);\r\n            if (!this._cells.some(c => c.position.equals(position))) {\r\n                const value = this._randomize.getRandomCellValue();\r\n                const newCell = new Cell(value, position);\r\n                this._cells.push(newCell);\r\n                const action = new AddCellAction(newCell);\r\n                this._actions.push(action);\r\n                return [action];\r\n            }\r\n        };\r\n    }\r\n\r\n    get matrix(): number[][] {\r\n        let matrix: number[][] = Array(this.mapSize)\r\n            .fill([])\r\n            .map(() => Array(this.mapSize)\r\n                .fill(0)\r\n            );\r\n        for(const cell of this._cells) {\r\n            matrix[cell.position.y][cell.position.x] = cell.value;\r\n        }\r\n        return matrix;\r\n    }\r\n\r\n    get score(): number {\r\n        return this._score;\r\n    }\r\n\r\n    get stepCount(): number {\r\n        return this._stepCount;\r\n    }\r\n\r\n    get maxValue(): number {\r\n        return this._cells.length > 0 \r\n            ? Math.max(...this._cells.map(cell => cell.value))\r\n            : 0;\r\n    }\r\n\r\n    get mapSize(): number {\r\n        return this._mapSize;\r\n    }\r\n\r\n    get isEnd(): boolean {\r\n        return !this.canDoMove();\r\n    }\r\n\r\n\r\n    constructor(mapSize: number, randomize: ILogicRandomize) {\r\n        if (mapSize < 2) throw new RangeError('mapSize shouldn`t be lower than 2');\r\n        if (!randomize) throw new TypeError('randomize shouldn`t be null');\r\n        this._mapSize = mapSize;\r\n        this._randomize = randomize;\r\n    }\r\n\r\n\r\n    private _cells: Cell[] = [];\r\n    private _actions: Action[] = [];\r\n    private _score: number = 0;\r\n    private _stepCount: number = 0;\r\n    private _mapSize: number;\r\n    private readonly _randomize: ILogicRandomize;\r\n}\r\n\r\nexport default Logic;","import ILogicRandomize from './ILogicRandomize';\r\nimport Point from '../Point';\r\n\r\nclass LogicRandomize implements ILogicRandomize {\r\n    getRandomPosition(matrixSize: number): Point {\r\n        return new Point(\r\n            this.getRandomIntInclusive(0, matrixSize - 1),\r\n            this.getRandomIntInclusive(0, matrixSize - 1)\r\n        );\r\n    }\r\n    getRandomCellValue(): number {\r\n        return this.getRandomIntInclusive(0, 5) > 0 ? 2 : 4;\r\n    }\r\n\r\n    private getRandomIntInclusive(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}\r\n\r\nexport default LogicRandomize;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Map, { useMapAnimation } from './components/Map';\r\nimport Counter from './components/Counter';\r\nimport Modal from './components/Modal';\r\nimport Button from './components/Button';\r\nimport Direction from './models/Direction'\r\nimport Logic from './models/Logic/Logic';\r\nimport LogicRandomize from './models/LogicRandomize/LogicRandomize';\r\nimport { Action } from './models/Actions';\r\nimport { useKeyboardArrows } from './utils/hooks';\r\n\r\n/*todo create config file*/\r\nconst MapSize = 4;\r\nconst InitialDigitsCount = 2;\r\n\r\nexport default function App() {\r\n    const [logic, setLogic] = useState<Logic | null>(null);\r\n\r\n    const {mapAnimationParams, sendActions} = useMapAnimation();\r\n\r\n    useEffect(() => {\r\n        const newLogic = new Logic(MapSize, new LogicRandomize());\r\n        const actions: Action[] = [];\r\n        for (let i = 0; i < InitialDigitsCount; i++) {\r\n            const action = newLogic.addCell();\r\n            actions.push(...action);\r\n        }\r\n        setLogic(newLogic);\r\n        sendActions(actions);\r\n    }, [sendActions]);\r\n\r\n    const restart = () => {\r\n        if (logic === null) return;\r\n        const actions = logic.restart();\r\n        for (let i = 0; i < InitialDigitsCount; i++) {\r\n            const action = logic.addCell();\r\n            actions.push(...action);\r\n        }\r\n        sendActions(actions);\r\n    };\r\n\r\n    useKeyboardArrows((direction: Direction) => {\r\n        if (logic === null) return;\r\n        const actions = logic.move(direction);\r\n        sendActions(actions);\r\n    });\r\n    \r\n    return (logic &&\r\n        <div className='app'>\r\n            <div className='app__map'>\r\n                <Map mapSize={logic.mapSize} mapAnimationParams={mapAnimationParams}/>\r\n            </div>\r\n            <div className='app__title'>\r\n                <h1><a href='https://github.com/shiriev/shiriev-2048/'>2048</a></h1>\r\n            </div>\r\n            <div className='app__score'>\r\n                <Counter title={'очки'} value={logic.score}/>\r\n            </div>\r\n            <div className='app__step-count'>\r\n                <Counter title={'ходы'} value={logic.stepCount}/>\r\n            </div>\r\n            {\r\n                logic.isEnd && \r\n                <Modal title='Игра окончена'>\r\n                        <p>Хотите сыграть ещё?</p>\r\n                        <Button title='рестарт' onClick={restart}/>\r\n                </Modal>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import Direction from '../models/Direction';\r\nimport { useEffect } from 'react';\r\n\r\nexport function useKeyboardArrows(callback: (direction: Direction) => void): void {\r\n    useEffect(() => {\r\n        const onKeyDown = (e: KeyboardEvent) => {\r\n            let direction;\r\n            switch (e.key){\r\n                case 'ArrowUp': direction = Direction.Up; break;\r\n                case 'ArrowDown': direction = Direction.Down; break;\r\n                case 'ArrowLeft': direction = Direction.Left; break;\r\n                case 'ArrowRight': direction = Direction.Right; break;\r\n                default: return;\r\n            };\r\n            callback(direction);\r\n        };\r\n        document.addEventListener('keydown', onKeyDown, false);\r\n        return () => document.removeEventListener('keydown', onKeyDown, false); \r\n    }, [callback]);\r\n}\r\n"],"sourceRoot":""}