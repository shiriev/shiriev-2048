{"version":3,"sources":["components/Block.tsx","models/Actions/Action.ts","models/Actions/AddCellAction.ts","models/Actions/LoseAction.ts","models/Actions/MergeAction.ts","models/Actions/MoveAction.ts","models/Actions/RestartAction.ts","components/Map.tsx","components/Counter.tsx","components/Modal.tsx","models/Direction.ts","components/Button.tsx","models/Point.ts","models/Cell.ts","models/Logic/LogicState.ts","models/Logic/Logic.ts","models/LogicRandomize/LogicRandomize.ts","App.tsx","serviceWorker.js","index.tsx","utils/hooks.ts"],"names":["Block","props","cell","value","position","style","x","y","className","toString","length","Action","AddCellAction","this","clone","LoseAction","MergeAction","firstCell","secondCell","newCell","MoveAction","oldPosition","newPosition","RestartAction","AnimatedCell","id","Map","mapAnimationParams","mapSize","cells","map","cellWithId","key","Counter","title","Modal","children","Direction","Button","onClick","Point","p","Cell","LogicState","actions","score","stepCount","Logic","randomize","_cells","_actions","_score","_stepCount","_mapSize","_randomize","RangeError","TypeError","logicState","_","restartAction","push","matrix","i","j","yDirection","Left","from","to","Right","Up","Down","splice","indexOf","direction","getPointTransform","cellsOnLine","filter","c","sort","c1","c2","freeX","num","currentCell","nextCell","dropCell","newValue","mergeAction","moveAction","addActions","addCell","canDoMove","getRandomPosition","some","equals","getRandomCellValue","action","Array","fill","Math","max","LogicRandomize","matrixSize","getRandomIntInclusive","min","ceil","floor","random","MapSize","InitialDigitsCount","Boolean","window","location","hostname","match","ReactDOM","callback","useState","logic","setLogic","cellsRef","useRef","idCounterRef","setCells","findCellOnPosition","useCallback","cellsWithId","find","CellWithId","undefined","Error","sendActions","currentActions","newCells","current","cell1","useMapAnimation","useEffect","newLogic","move","onKeyDown","e","document","addEventListener","removeEventListener","href","isEnd","restart","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1182fc18.chunk.js","sourcesContent":["import React from 'react';\nimport './Block.css';\nimport Cell from '../models/Cell';\n\nexport default function Block(props: {\n    cell: Cell\n}) {\n    const { value, position } = props.cell;\n    const style = {\n        \"--position-x\": position.x,\n        \"--position-y\": position.y\n    } as React.CSSProperties;\n    return <div style={style} className={`block block_value_${value}`}>\n        <span className={`block__text block__text_digits-count_${value.toString().length}`}>\n            {value || null}\n        </span>\n    </div>\n}\n","import ICloneable from '../ICloneable';\n\nabstract class Action implements ICloneable {\n    abstract clone(): Action;\n}\n\nexport default Action;","import Action from './Action';\nimport Cell from '../Cell';\n\nclass AddCellAction extends Action {\n    cell: Cell;\n\n    constructor(cell: Cell) {\n        super();\n        this.cell = cell;\n    }\n\n    clone(): AddCellAction {\n        return new AddCellAction(this.cell.clone());\n    }\n}\n\nexport default AddCellAction;","import Action from './Action';\n\nclass LoseAction extends Action {\n    clone(): LoseAction {\n        return new LoseAction();\n    }\n}\n\nexport default LoseAction;","import Action from './Action';\nimport Cell from '../Cell';\n\nclass MergeAction extends Action {\n    firstCell: Cell;\n    secondCell: Cell;\n    newCell: Cell;\n\n    constructor(firstCell: Cell, secondCell: Cell, newCell: Cell) {\n        super();\n        this.firstCell = firstCell;\n        this.secondCell = secondCell;\n        this.newCell = newCell;\n    }\n\n    clone(): MergeAction {\n        return new MergeAction(this.firstCell.clone(), this.secondCell.clone(), this.newCell.clone());\n    }\n}\n\nexport default MergeAction;","import Action from './Action';\nimport Point from '../Point';\n\nclass MoveAction extends Action {\n    value: number;\n    oldPosition: Point;\n    newPosition: Point;\n\n    constructor(value: number, oldPosition: Point, newPosition: Point) {\n        super();\n        this.value = value;\n        this.oldPosition = oldPosition;\n        this.newPosition = newPosition;\n    }\n\n    clone(): MoveAction {\n        return new MoveAction(this.value, this.oldPosition.clone(), this.newPosition.clone());\n    }\n}\n\nexport default MoveAction;","import Action from './Action';\n\nclass RestartAction extends Action {\n    clone(): RestartAction {\n        return new RestartAction();\n    }\n}\n\nexport default RestartAction;","import React, { useRef, useState, useCallback } from 'react';\nimport './Map.css';\nimport Block from './Block';\nimport ICloneable from '../models/ICloneable';\nimport Cell from '../models/Cell';\nimport Point from '../models/Point';\nimport { Action, AddCellAction, MoveAction, MergeAction, RestartAction } from '../models/Actions';\n\nclass AnimatedCell implements ICloneable {\n    cell: Cell;\n    id: number;\n\n    constructor(cell: Cell, id: number) {\n        this.cell = cell;\n        this.id = id;\n    }\n\n    clone(): AnimatedCell {\n        return new AnimatedCell(this.cell.clone(), this.id);\n    }\n}\n\nexport type MapAnimationParams = {\n    cells: AnimatedCell[];\n}\n\nexport function useMapAnimation(): {mapAnimationParams: MapAnimationParams, sendActions: (currentActions: Action[]) => void} {\n    const cellsRef = useRef<AnimatedCell[]>([]);\n    const idCounterRef = useRef(0);\n    const [cells, setCells] = useState<AnimatedCell[]>([]);\n    \n    const findCellOnPosition = useCallback((cellsWithId: AnimatedCell[], position: Point): AnimatedCell => {\n        const cell = cellsWithId.find(CellWithId => CellWithId.cell.position.equals(position));\n        if (cell === undefined) throw new Error('');\n        return cell;\n    }, []);\n\n    const sendActions = useCallback((currentActions: Action[]) => {\n        const newCells = [...cellsRef.current];\n        for (const action of currentActions) {\n            if( action instanceof AddCellAction) {\n                newCells.push(new AnimatedCell(action.cell.clone(), idCounterRef.current++));\n            } else if (action instanceof MoveAction) {\n                const cell = findCellOnPosition(cellsRef.current, action.oldPosition);\n                cell.cell.position = action.newPosition.clone();\n            } else if (action instanceof MergeAction) {\n                const cell1 = findCellOnPosition(cellsRef.current, action.firstCell.position);\n                const cell2 = findCellOnPosition(cellsRef.current, action.secondCell.position);\n                cell2.cell = action.newCell.clone();\n                newCells.splice(newCells.indexOf(cell1), 1);\n            } else if (action instanceof RestartAction) {\n                newCells.length = 0;\n            }\n        }\n        cellsRef.current = newCells;\n        setCells(cellsRef.current);\n    }, [findCellOnPosition]);\n\n    return {\n        mapAnimationParams: {cells: cells}, \n        sendActions\n    };\n}\n\n\nexport default function Map(props: {\n    mapAnimationParams: MapAnimationParams;\n    mapSize: number;\n}){\n    const { mapAnimationParams, mapSize } = props;\n    return <div className='map' style={{'--map-size': mapSize} as React.CSSProperties}>\n        {mapAnimationParams.cells.map(cellWithId => <Block key={cellWithId.id} cell={cellWithId.cell}/>)}\n    </div>\n}\n","import React from 'react';\nimport './Counter.css';\n\nexport default function Counter(props: {\n    title: string\n    value: number\n}) {\n    const { title, value } = props;\n    return <div className={'counter'}>\n        <div className={'counter__title'}>\n            {title}\n        </div>\n        <div className={'counter__value'}>\n            {value}\n        </div>\n    </div>\n}\n","import React, { ReactNode } from 'react';\nimport './Modal.css'\n\nexport default function Modal(props: {\n    title: string;\n    children: ReactNode;\n}) {\n    return <div className='modal'>\n        <div className='modal__content'>\n            <h1 className='modal__title'>{props.title}</h1>\n            {props.children}\n        </div>\n    </div>\n}\n","enum Direction {\n    Up,\n    Down,\n    Left,\n    Right,\n}\n\nexport default Direction;","import React from 'react';\nimport './Button.css'\n\nexport default function Button(props: {\n    onClick: () => void\n    title: string\n}) {\n    return <div className='button' onClick={props.onClick}>{props.title}</div>\n}\n","import ICloneable from './ICloneable';\n\nclass Point implements ICloneable {\n    x: number = 0;\n    y: number = 0;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    equals(p: Point): boolean {\n        return p.x === this.x && p.y === this.y;\n    }\n\n    clone(): Point {\n        return new Point(this.x, this.y);\n    }\n}\n\nexport default Point;","import Point from './Point';\nimport ICloneable from './ICloneable';\n\nclass Cell implements ICloneable {\n    value: number;\n    position: Point;\n\n    constructor(value: number, position: Point) {\n        this.value = value;\n        this.position = position;\n    }\n    \n    clone(): Cell {\n        return new Cell(this.value, this.position.clone());\n    }\n}\n\nexport default Cell;","import Cell from '../Cell';\nimport {Action} from '../Actions';\n\nclass LogicState {\n    cells: Cell[] = [];\n    actions: Action[] = [];\n    score: number = 0;\n    stepCount: number = 0;\n    mapSize: number = 0;\n}\n\nexport default LogicState;","import ILogic from './ILogic';\nimport ILogicRandomize from '../LogicRandomize/ILogicRandomize';\nimport Direction from '../Direction';\nimport Point from '../Point';\nimport Cell from '../Cell';\nimport LogicState from './LogicState';\nimport { Action, AddCellAction, MoveAction, MergeAction, LoseAction, RestartAction } from '../Actions';\n\nclass Logic implements ILogic {\n\n    load(logicState: LogicState): void {\n        this._actions = logicState.actions;\n        this._cells = logicState.cells;\n        this._mapSize = logicState.mapSize;\n        this._score = logicState.score;\n        this._stepCount = logicState.stepCount;\n    }\n\n    save(): LogicState {\n        const logicState = new LogicState();\n        logicState.actions = this._actions.map(_ => _.clone());\n        logicState.cells = this._cells.map(_ => _.clone());\n        logicState.mapSize = this.mapSize;\n        logicState.score = this._score;\n        logicState.stepCount = this._stepCount;\n        return logicState;\n    }\n\n    restart(): Action[] {\n        this._cells = [];\n        this._score = 0;\n        this._stepCount = 0;\n\n        const restartAction = new RestartAction();\n        this._actions.push(restartAction);\n        return [restartAction];\n    }\n\n    private canDoMove(): boolean {\n        const hasFreeSpace = this._cells.length < (this.mapSize * this.mapSize);\n        if(hasFreeSpace) {\n            return true;\n        }\n        \n        const matrix = this.matrix;\n\n        for(let i = 0; i < matrix.length; i++) {\n            for(let j = 0; j < matrix.length - 1; j++) {\n                if (matrix[i][j] === matrix[i][j + 1]\n                 || matrix[j][i] === matrix[j + 1][i]) {\n                     return true;\n                 }\n            }\n        }\n\n        return false;\n    }\n\n    private getPointTransform(mapSize: number, yDirection: Direction): {\n        from(p: Point): Point;\n        to(p: Point): Point;\n    } {\n        switch(yDirection) {\n            case Direction.Left:\n                return {\n                    from: p => p,\n                    to: p => p\n                };\n            case Direction.Right:\n                return {\n                    from: p => new Point(mapSize - p.x - 1, p.y),\n                    to: p => new Point(mapSize - p.x - 1, p.y)\n                };\n            case Direction.Up:\n                return {\n                    from: p => new Point(p.y, p.x),\n                    to: p => new Point(p.y, p.x)\n                };\n            case Direction.Down:\n                return {\n                    from: p => new Point(mapSize - p.y - 1, p.x),\n                    to: p => new Point(p.y, mapSize - p.x - 1)\n                };\n        }\n    }\n\n    private dropCell(cell: Cell): void {\n        this._cells.splice(this._cells.indexOf(cell), 1);\n    }\n\n    move(direction: Direction): Action[] {\n        const actions: Action[] = [];\n        const { from, to } = this.getPointTransform(this.mapSize, direction);\n        for(let y = 0; y < this.mapSize; y++) {\n            const cellsOnLine = this._cells\n                .filter(c => from(c.position).y === y)\n                .sort((c1, c2) => from(c1.position).x - from(c2.position).x);\n            let freeX = 0;\n            for(let num = 0; num < cellsOnLine.length; num++) {\n                const currentCell = cellsOnLine[num];\n                const nextCell = num + 1 < cellsOnLine.length ? cellsOnLine[num + 1] : null;\n                if (nextCell !== null && currentCell.value === nextCell.value) {\n                    this.dropCell(currentCell);\n                    this.dropCell(nextCell);\n                    const newValue = currentCell.value * 2;\n                    const newCell = new Cell(newValue, to(new Point(freeX, y)));\n                    this._cells.push(newCell);\n                    const mergeAction = new MergeAction(currentCell, nextCell, newCell);\n                    actions.push(mergeAction);\n                    this._score += newValue;\n                    num++;\n                } else {\n                    if (freeX < from(currentCell.position).x) {\n                        const oldPosition = currentCell.position.clone();\n                        currentCell.position = to(new Point(freeX, from(currentCell.position).y));\n                        const newPosition = currentCell.position.clone();\n                        const moveAction = new MoveAction(currentCell.value, oldPosition, newPosition);\n                        actions.push(moveAction);\n                    }\n                }\n                freeX++;\n            }\n        }\n\n        if (actions.length <= 0) {\n            return [];\n        }\n                    \n        this._stepCount++;\n        this._actions.push(...actions);\n\n        const addActions = this.addCell();\n        actions.push(...addActions);\n\n        if (!this.canDoMove()) {\n            actions.push(new LoseAction());\n        }\n\n        return actions;\n    }\n\n    addCell(): Action[] {\n        while(true) {\n            const position = this._randomize.getRandomPosition(this.mapSize);\n            if (!this._cells.some(c => c.position.equals(position))) {\n                const value = this._randomize.getRandomCellValue();\n                const newCell = new Cell(value, position);\n                this._cells.push(newCell);\n                const action = new AddCellAction(newCell);\n                this._actions.push(action);\n                return [action];\n            }\n        };\n    }\n\n    get matrix(): number[][] {\n        let matrix: number[][] = Array(this.mapSize)\n            .fill([])\n            .map(() => Array(this.mapSize)\n                .fill(0)\n            );\n        for(const cell of this._cells) {\n            matrix[cell.position.y][cell.position.x] = cell.value;\n        }\n        return matrix;\n    }\n\n    get score(): number {\n        return this._score;\n    }\n\n    get stepCount(): number {\n        return this._stepCount;\n    }\n\n    get maxValue(): number {\n        return this._cells.length > 0 \n            ? Math.max(...this._cells.map(cell => cell.value))\n            : 0;\n    }\n\n    get mapSize(): number {\n        return this._mapSize;\n    }\n\n    get isEnd(): boolean {\n        return !this.canDoMove();\n    }\n\n\n    constructor(mapSize: number, randomize: ILogicRandomize) {\n        if (mapSize < 2) throw new RangeError('mapSize shouldn`t be lower than 2');\n        if (!randomize) throw new TypeError('randomize shouldn`t be null');\n        this._mapSize = mapSize;\n        this._randomize = randomize;\n    }\n\n\n    private _cells: Cell[] = [];\n    private _actions: Action[] = [];\n    private _score: number = 0;\n    private _stepCount: number = 0;\n    private _mapSize: number;\n    private readonly _randomize: ILogicRandomize;\n}\n\nexport default Logic;","import ILogicRandomize from './ILogicRandomize';\nimport Point from '../Point';\n\nclass LogicRandomize implements ILogicRandomize {\n    getRandomPosition(matrixSize: number): Point {\n        return new Point(\n            this.getRandomIntInclusive(0, matrixSize - 1),\n            this.getRandomIntInclusive(0, matrixSize - 1)\n        );\n    }\n    getRandomCellValue(): number {\n        return this.getRandomIntInclusive(0, 5) > 0 ? 2 : 4;\n    }\n\n    private getRandomIntInclusive(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n}\n\nexport default LogicRandomize;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Map, { useMapAnimation } from './components/Map';\nimport Counter from './components/Counter';\nimport Modal from './components/Modal';\nimport Button from './components/Button';\nimport Direction from './models/Direction'\nimport Logic from './models/Logic/Logic';\nimport LogicRandomize from './models/LogicRandomize/LogicRandomize';\nimport { Action } from './models/Actions';\nimport { useKeyboardArrows } from './utils/hooks';\n\n/*todo create config file*/\nconst MapSize = 4;\nconst InitialDigitsCount = 2;\n\nexport default function App() {\n    const [logic, setLogic] = useState<Logic | null>(null);\n\n    const {mapAnimationParams, sendActions} = useMapAnimation();\n\n    useEffect(() => {\n        const newLogic = new Logic(MapSize, new LogicRandomize());\n        const actions: Action[] = [];\n        for (let i = 0; i < InitialDigitsCount; i++) {\n            const action = newLogic.addCell();\n            actions.push(...action);\n        }\n        setLogic(newLogic);\n        sendActions(actions);\n    }, [sendActions]);\n\n    const restart = () => {\n        if (logic === null) return;\n        const actions = logic.restart();\n        for (let i = 0; i < InitialDigitsCount; i++) {\n            const action = logic.addCell();\n            actions.push(...action);\n        }\n        sendActions(actions);\n    };\n\n    useKeyboardArrows((direction: Direction) => {\n        if (logic === null) return;\n        const actions = logic.move(direction);\n        sendActions(actions);\n    });\n    \n    return (logic &&\n        <div className='app'>\n            <div className='app__map'>\n                <Map mapSize={logic.mapSize} mapAnimationParams={mapAnimationParams}/>\n            </div>\n            <div className='app__title'>\n                <h1><a href='https://github.com/shiriev/shiriev-2048/'>2048</a></h1>\n            </div>\n            <div className='app__score'>\n                <Counter title={'очки'} value={logic.score}/>\n            </div>\n            <div className='app__step-count'>\n                <Counter title={'ходы'} value={logic.stepCount}/>\n            </div>\n            {\n                logic.isEnd && \n                <Modal title='Игра окончена'>\n                        <p>Хотите сыграть ещё?</p>\n                        <Button title='рестарт' onClick={restart}/>\n                </Modal>\n            }\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Direction from '../models/Direction';\nimport { useEffect } from 'react';\n\nexport function useKeyboardArrows(callback: (direction: Direction) => void): void {\n    useEffect(() => {\n        const onKeyDown = (e: KeyboardEvent) => {\n            let direction;\n            switch (e.key){\n                case 'ArrowUp': direction = Direction.Up; break;\n                case 'ArrowDown': direction = Direction.Down; break;\n                case 'ArrowLeft': direction = Direction.Left; break;\n                case 'ArrowRight': direction = Direction.Right; break;\n                default: return;\n            };\n            callback(direction);\n        };\n        document.addEventListener('keydown', onKeyDown, false);\n        return () => document.removeEventListener('keydown', onKeyDown, false); \n    }, [callback]);\n}\n"],"sourceRoot":""}